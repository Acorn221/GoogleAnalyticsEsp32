#include "HelperFunctions.h"
#include "Config.h"

#include <Fonts/FreeMonoBold9pt7b.h>

GxIO_Class io(SPI, /*CS=5*/ SS, /*DC=*/17, /*RST=*/16);
GxEPD_Class display(io, /*RST=*/16, /*BUSY=*/4);

unsigned long int timeTokenRecieved = 0;

unsigned long int timeLastChecked = 0;
unsigned long int updateInterval = 300000; // 5 minutes

DynamicJsonDocument doc(2048);

WiFiClientSecure *client = new WiFiClientSecure;
HTTPClient https;

struct AccessToken {
  String access_token;
  int expires_in;
  bool exists;
};

AccessToken t = {
  .access_token = "",
  .expires_in = 0,
  .exists = false
};

void setup()
{

  // Initialising the display
  display.init(115200);
  display.setRotation(1);
  display.fillScreen(GxEPD_WHITE);
  display.setTextColor(GxEPD_BLACK);
  display.setFont(&FreeMonoBold9pt7b);
  display.setTextSize(1);
  display.setTextWrap(true);
  showLines("Loading...", 1, 10, &display);
  display.update();

  if(DEBUG) 
    Serial.begin(115200);

  if(DEBUG) 
    Serial.printf("Connecting to wifi... %s\n", SSID);

  // Connecting to the wifi
  WiFi.mode(WIFI_STA);
  WiFi.begin(SSID, PASSWORD);

  // Wait for connection
  if(WiFi.waitForConnectResult() != WL_CONNECTED) {
    if(DEBUG) 
      Serial.println("Connection Failed! restarting...");
    ESP.restart();
    
  }

  if (DEBUG)
    Serial.printf("\nConnected To: %s, IP: %s\n", SSID, WiFi.localIP().toString().c_str());


  client ->setCACert(googleapis_root_ca);

  // setDisplayNotListening(&display);
}

void loop()
{
  if(client){
    if(!t.exists || (t.expires_in + timeTokenRecieved) <= (millis() / 1000))  

    if(https.begin(*client, googleapis_refresh_endpoint)) {

      char body[1024];
      sprintf(body, R"({
          "client_id": "%s",
          "client_secret": "%s",
          "refresh_token": "%s",
          "grant_type": "refresh_token"
      })", CLIENT_ID, CLIENT_SECRET, GOOGLE_REFRESH_TOKEN);

      Serial.println("beginning request for access token");

      https.addHeader("Content-Type", "application/json");
      https.addHeader("Accept", "*/*");
      https.addHeader("Content-Length", String(strlen(body)));
      // https.addHeader("Connection", "close");

      int httpCode = https.POST(body);

      if(httpCode == 200){
        Serial.println("Got access token");
        
        deserializeJson(doc, https.getString());

        t.access_token = doc["access_token"].as<String>();
        t.expires_in = doc["expires_in"].as<int>();
        t.exists = true;

        doc.clear();

        timeTokenRecieved = millis() / 1000;

        Serial.printf("Access Token: %s, Expires in: %d\n", t.access_token.c_str(), t.expires_in);
      } else {
        Serial.printf("Error getting access token: %d\n", httpCode);
        Serial.println(https.getString());
        return;
      }

      https.end();
    }
    
    // checking to see if its time to update
    if(millis() - timeLastChecked >= updateInterval) {
      if(DEBUG)
        Serial.println("Updating the display");
      
      HTTPClient https;

      char url[256];

      sprintf(url, "https://content-analyticsdata.googleapis.com/v1beta/properties/%s:runRealtimeReport", PROPERTY_ID);

      if(https.begin(*client, url)) {
        https.addHeader("Content-Type", "application/json");
        https.addHeader("Accept", "*/*");
        https.addHeader("Authorization", "Bearer " + t.access_token);

        char body[1024] = R"({
          "dimensions": [
                {
                    "name": "eventName"
                }
            ],
            "metrics": [
                {
                    "name": "eventCount"
                }
            ],
            "minuteRanges": [
                {
                    "name": "lastFiveMinutes",
                    "startMinutesAgo": 5,
                    "endMinutesAgo": 0
                },
                {
                    "name": "lastThirtyMinutes",
                    "startMinutesAgo": 29
                }
            ]
          })";

        int httpCode = https.POST(body);

        if(httpCode == 200) {
          deserializeJson(doc, https.getString());

          // doc.rows[0].dimensionValues[0].value and doc.rows[0].metricValues[0].value to print and set on the display
          String name = doc["rows"][0]["dimensionValues"][0]["value"].as<String>();
          int count = doc["rows"][0]["metricValues"][0]["value"].as<int>();

          Serial.printf("Name: %s, Count: %d\n", name.c_str(), count);

          display.fillScreen(GxEPD_WHITE);
          showLines(name, 1, 10, &display);
          showLines(String(count), 1, 30, &display);
          display.update();

        } else {
          Serial.printf("Error getting response, HTTP Code:%d, Content: %s\n", httpCode, https.getString().c_str());
        }
      }
      https.end();
      timeLastChecked = millis();
    }
  }
}
