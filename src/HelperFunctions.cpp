#include "HelperFunctions.h"

const char *googleapis_refresh_endpoint = "https://www.googleapis.com/oauth2/v4/token";

const char *googleapis_root_ca = 
    "-----BEGIN CERTIFICATE-----\n"
    "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\n"
    "bP6MvPJwNQzcmRk13NfIRmPVNnGuV/u3gm3c\n"
    "-----END CERTIFICATE-----";

// 80x80
const unsigned char LighterfuelLogo [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfb, 0xfe, 0x1f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xf8, 0xf4, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xf0, 0x03, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 
	0xe0, 0x03, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xc0, 0x01, 0xff, 0xf9, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0xe0, 0x03, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x70, 0x03, 
	0xff, 0xfc, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x30, 0x03, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0x00, 0x00, 0x18, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0c, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x06, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
	0x03, 0x00, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x01, 0x81, 0xff, 0xfd, 0xff, 0xff, 
	0xff, 0xc0, 0x00, 0x00, 0x01, 0xc3, 0xff, 0xfd, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0xe7, 
	0xff, 0xfd, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf9, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xf9, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfb, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf7, 0xff, 0xff, 
	0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf7, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0xff, 0xe7, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xef, 0xff, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xef, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xdf, 
	0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xbf, 0xff, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xff, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x7f, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xfe, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0xff, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfb, 0xff, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfb, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
	0xf3, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf7, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xe7, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xef, 0xff, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xdf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x9f, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xfe, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0xff, 0xff, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfb, 0xff, 0xff, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xf7, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe7, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xbf, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 
	0xff, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xe0, 
	0x00, 0x00, 0x1f, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 
	0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 24x24
const unsigned char ClockIcon [] PROGMEM = {
	0x00, 0xff, 0x00, 0x03, 0xff, 0xc0, 0x07, 0xff, 0xe0, 0x0f, 0xff, 0xf8, 0x1f, 0xe7, 0xf8, 0x3f, 
	0xe3, 0xfc, 0x7f, 0xe3, 0xfe, 0x7f, 0xe3, 0xfe, 0x7f, 0xe3, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xe3, 
	0xff, 0xff, 0xe3, 0xff, 0xff, 0xc3, 0xff, 0xff, 0x07, 0xff, 0xfe, 0x0f, 0xff, 0x7f, 0x1f, 0xfe, 
	0x7f, 0xff, 0xfe, 0x3f, 0xff, 0xfe, 0x3f, 0xff, 0xfc, 0x1f, 0xff, 0xf8, 0x0f, 0xff, 0xf0, 0x07, 
	0xff, 0xe0, 0x01, 0xff, 0x80, 0x00, 0x7e, 0x00
};

// 49x38px
const unsigned char PeopleIcon [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
	0xfe, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x7f, 0xff, 0x00, 
	0x00, 0x00, 0xff, 0xe0, 0x7f, 0xff, 0x80, 0x00, 0x01, 0xff, 0xf0, 0x7f, 0xff, 0x80, 0x00, 0x01, 
	0xff, 0xf0, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xf8, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xf8, 
	0x7f, 0xff, 0x80, 0x00, 0x01, 0xff, 0xf8, 0x7f, 0xff, 0x80, 0x00, 0x01, 0xff, 0xf0, 0x7f, 0xff, 
	0x00, 0x00, 0x01, 0xff, 0xf0, 0x3f, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x3f, 0xfe, 0x00, 0x00, 
	0x00, 0xff, 0xe0, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x3f, 
	0x80, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0xf8, 0x1f, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0xff, 0xff, 0x80, 0x00, 0x1f, 
	0xff, 0xf3, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xe7, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xcf, 
	0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0x9f, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0x3f, 0xff, 0xff, 
	0xfe, 0x00, 0x7f, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x00, 
	0x7f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};




void showLines(String text, int maxLines, int y, GxEPD_Class* display)
{ // this function displays words whole on the display and limits the lines they use
  if (y > 0)
  { // if a Y is given, set the cursor to it
    display->setCursor(0, y);
  }
  if (text.length() > MAX_LENGTH_PER_LINE)
  {
    for (int i = 0; i < maxLines; i++)
    {
      if (text.length() > 0)
      {
        if (text.length() > 21)
        {
          if (i == maxLines - 1)
          {
            text = text.substring(0, 18);
            text.concat("...");
            // display->setCursor(0, y);
            display->println(text.c_str());
          }
          else
          {
            int endOfLastWord = text.lastIndexOf(" ", 21);
            String temp = text.substring(0, endOfLastWord);
            text = text.substring(endOfLastWord + 1);
            // display->setCursor(0, y);
            display->println(temp.c_str());
            y += 15;
          }
        }
        else
        {
          display->println(text.c_str());
          text = "";
        }
      }
    }
  }
  else
  {
    display->println(text.c_str());
  }
}

void setDisplayNotListening(GxEPD_Class * disp){
  disp->fillScreen(GxEPD_WHITE);
  showLines("I'm not listening to anything right now :(", 2, 50, disp);
  disp->update();
}

void drawRoundedLines(int distanceBetween, int width, int lengths[25], int count, int x, int y, GxEPD_Class* display)
{ // for drawing rounded lines next to eachother
  for (int i = 0; i < count; i++)
  {
    drawRoundedLine(lengths[i], width, x + ((distanceBetween + width) * i), y, display);
  }
}

void drawRoundedLine(int height, int width, int x, int y, GxEPD_Class* display)
{ // for drawing a singular rounded line, y is parsed in the middle of the line
  y = y - (height / 2);
  display->fillRoundRect(x, y, width, height, width, GxEPD_BLACK);
}
